generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                     String         @id @default(cuid())
  username               String         @unique @db.VarChar(255)
  firstName              String         @db.VarChar(255)
  lastName               String         @db.VarChar(255)
  dateBirth              String?
  gender                 Gender?        @relation(fields: [genderId], references: [id])
  genderId               String?
  email                  String?        @unique @db.VarChar(255)
  password               String         @db.VarChar(255)
  phone                  String?        @unique @db.VarChar(255)
  bookings               Booking[]
  refreshTokens          RefreshToken[]
  acceptTermsAndServices Boolean        @default(true)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

model RefreshTokenForAdmin {
  id        String   @id @default(cuid())
  admin     Admin    @relation(fields: [adminId], references: [id])
  adminId   String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gender {
  id     String @id @default(cuid())
  gender String @db.VarChar(255)
  users  User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String        @id @default(cuid())
  position  String        @db.VarChar(255)
  admins    AdminsRoles[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Admin {
  id              String                 @id @default(cuid())
  username        String                 @unique @db.VarChar(255)
  firstName       String                 @db.VarChar(255)
  lastName        String                 @db.VarChar(255)
  email           String?                @unique @db.VarChar(255)
  password        String                 @db.VarChar(255)
  phone           String?                @unique @db.VarChar(255)
  refreshTokens   RefreshTokenForAdmin[]
  roles           AdminsRoles[]          @relation("admin")
  modifiedByAdmin AdminsRoles[]          @relation("modifiedByAdmin")

  RecordsEditHistoryForBuffetMenu RecordEditHistoryForBuffetMenu[]
  RecordsEditHistoryForSetDish    RecordEditHistoryForSetDish[]
  RecordsEditHistoryForDish       RecordEditHistoryForDish[]
  createdAt                       DateTime                         @default(now())
  updatedAt                       DateTime                         @updatedAt
}

model AdminsRoles {
  role              Role     @relation(fields: [roleId], references: [id])
  roleId            String
  admin             Admin    @relation("admin", fields: [adminId], references: [id])
  adminId           String
  modifiedByAdmin   Admin    @relation("modifiedByAdmin", fields: [modifiedByAdminId], references: [id])
  modifiedByAdminId String
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([roleId, adminId, modifiedByAdminId])
}

model BuffetMenu {
  id                 String                           @id @default(cuid())
  name               String                           @unique
  price              Int
  image              String
  special            Boolean                          @default(false)
  setDishes          SetDish[]
  RecordsEditHistory RecordEditHistoryForBuffetMenu[]
  bookings           Booking[]
  createdAt          DateTime                         @default(now())
  updatedAt          DateTime                         @updatedAt
}

model RecordEditHistoryForBuffetMenu {
  id                String     @id @default(cuid())
  buffetMenu        BuffetMenu @relation(fields: [buffetMenuId], references: [id])
  buffetMenuId      String
  modifiedByAdmin   Admin      @relation(fields: [modifiedByAdminId], references: [id])
  modifiedByAdminId String
  note              String?
  modifiedAt        DateTime   @default(now())
}

model SetDish {
  id                 String                        @id @default(cuid())
  name               String                        @unique
  image              String
  special            Boolean                       @default(false)
  buffetMenus        BuffetMenu[]
  dishes             Dish[]
  RecordsEditHistory RecordEditHistoryForSetDish[]
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt
}

model RecordEditHistoryForSetDish {
  id                String   @id @default(cuid())
  setDish           SetDish  @relation(fields: [setDishId], references: [id])
  setDishId         String
  modifiedByAdmin   Admin    @relation(fields: [modifiedByAdminId], references: [id])
  modifiedByAdminId String
  note              String?
  modifiedAt        DateTime @default(now())
}

model Dish {
  id                 String                     @id @default(cuid())
  name               String                     @unique
  image              String
  byNumberOfPeople   Boolean                    @default(false)
  price              String?
  setDishes          SetDish[]
  RecordsEditHistory RecordEditHistoryForDish[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecordEditHistoryForDish {
  id                String   @id @default(cuid())
  dish              Dish     @relation(fields: [dishId], references: [id])
  dishId            String
  modifiedByAdmin   Admin    @relation(fields: [modifiedByAdminId], references: [id])
  modifiedByAdminId String
  note              String?
  modifiedAt        DateTime @default(now())
}

model News {
  id        String  @id @default(cuid())
  title     String  @unique
  srcImg    String
  introduce String?
  content   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChildrenCategory {
  id                  String               @id @default(cuid())
  category            String               @unique
  deals               Int
  bookingsForChildren BookingForChildren[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookingForChildren {
  id                 String           @id @default(cuid())
  childrenCategory   ChildrenCategory @relation(fields: [childrenCategoryId], references: [id])
  childrenCategoryId String
  quantity           Int
  booking            Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VAT {
  id            String         @id @default(cuid())
  tax           Int            @unique
  InvoicesPrice InvoicePrice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoicePrice {
  id       String    @id @default(cuid())
  price    Int
  VAT      VAT       @relation(fields: [VATId], references: [id])
  VATId    String
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id                  String               @id @default(cuid())
  user                User?                @relation(fields: [userId], references: [id])
  userId              String?
  buffetMenu          BuffetMenu           @relation(fields: [buffetMenuId], references: [id])
  buffetMenuId        String
  phoneNumber         String
  author              String
  bookingTime         String
  bookingDate         String
  numberPeople        Int
  note                String?
  bookingsForChildren BookingForChildren[]
  bookingStatus       BookingStatus        @relation(fields: [bookingStatusId], references: [id])
  bookingStatusId     String
  invoicePrice        InvoicePrice         @relation(fields: [invoicePriceId], references: [id])
  invoicePriceId      String
  cancellation        Boolean              @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookingStatus {
  id       String    @id @default(cuid())
  step     Int       @unique
  name     String    @unique
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
